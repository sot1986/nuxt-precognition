import { addImports, addPlugin, addTemplate, addServerImports, addServerPlugin, createResolver, defineNuxtModule, addTypeTemplate } from '@nuxt/kit'
import defu from 'defu'
import type { Config } from './runtime/types/config'

// Module options TypeScript interface definition
export interface ModuleOptions extends Config {}

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'nuxt-precognition',
    configKey: 'precognition',
    compatibility: {
      nuxt: '>=3.9.0',
    },
  },
  // Default configuration options of the Nuxt module
  defaults: {
    validationTimeout: 1500,
    backendValidation: false,
    validateFiles: false,
    enableNuxtClientErrorParser: false,
    enableLaravelClientErrorParser: false,
    enableLaravelServerErrorParser: false,
  },
  setup(options, nuxt) {
    nuxt.options.runtimeConfig.public.precognition = defu(
      nuxt.options.runtimeConfig.public.precognition as Partial<ModuleOptions>,
      {
        validationTimeout: options.validationTimeout,
        backendValidation: options.backendValidation,
        validateFiles: options.validateFiles,
        enableNuxtClientErrorParser: options.enableNuxtClientErrorParser,
        enableLaravelClientErrorParser: options.enableLaravelClientErrorParser,
        enableLaravelServerErrorParser: options.enableLaravelServerErrorParser,
      },
    )

    const resolver = createResolver(import.meta.url)

    nuxt.options.nitro.plugins = nuxt.options.nitro.plugins || []

    // Do not add the extension since the `.ts` will be transpiled to `.mjs` after `npm run prepack`
    addPlugin(resolver.resolve('./runtime/plugin'))

    addImports({
      name: 'useForm',
      from: resolver.resolve('./runtime/useForm'),
      as: 'useForm',
    })

    addServerImports([
      {
        from: resolver.resolve('./runtime/server/definePrecognitiveEventHandler'),
        name: 'definePrecognitiveEventHandler',
      },
    ])

    addServerPlugin(resolver.resolve('./runtime/server/plugin'))

    addTypeTemplate({
      filename: 'types/nuxt-precognition.d.ts',
      getContents: () => `// Generated by nuxt-precognition
import type {ValidationErrorParser} from '${resolver.resolve('./runtime/types/core')}'
import type {ClientStatusHandlers} from '${resolver.resolve('./runtime/types/form')}'

interface NuxtPrecognition {
  $precognition: {
    errorParsers: ValidationErrorParser[],
    statusHandlers: ClientStatusHandlers,
    assertSuccessfulPrecognitiveResponses: (ctx: { options: { headers?: HeadersInit }, response: Response }) => void
  }
}

declare module '#app' {
  interface NuxtApp extends NuxtPrecognition {}
}

declare module 'vue' {
  interface ComponentCustomProperties extends NuxtPrecognition {}
}

export {}`,
    })

    const nitroTemplate = addTemplate({
      filename: 'types/nuxt-precognition-server.d.ts',
      getContents: () => `// Generated by nuxt-precognition
import type { PrecognitionEventContext } from '${resolver.resolve('./runtime/types/eventHandler')}'

declare module 'h3' {
  interface H3EventContext extends PrecognitionEventContext {}
}

export {}`,
    })

    nuxt.hooks.hook('nitro:config', (config) => {
      config.typescript?.tsConfig?.include?.push(nitroTemplate.dst)
    })
  },
})
